{
    "address": "0x4FBf2855eB6AB648228702356Bd726a7dfcCf101",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_adminAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "samotTokenAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "payer",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "paymentId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "date",
            "type": "uint256"
          }
        ],
        "name": "PaymentDone",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "admin",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_totalCost",
            "type": "uint256"
          }
        ],
        "name": "buyItems",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "samotToken",
        "outputs": [
          {
            "internalType": "contract IERC20",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_adminAddress",
            "type": "address"
          }
        ],
        "name": "setAdminAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0xc60c9bfcb9f7aa1d57f0969b1975bd36e87b4e1eb2606a8a1ad27654d258ab98",
    "receipt": {
      "to": null,
      "from": "0x399Db9b924bC348BfC3bD777817631eb5A79b152",
      "contractAddress": "0x4FBf2855eB6AB648228702356Bd726a7dfcCf101",
      "transactionIndex": 12,
      "gasUsed": "1008184",
      "logsBloom": "0x
      "blockHash": "0x43bce49734837662368be410bc6a160639e7c39d0ee93f38814f2cf8b591820d",
      "transactionHash": "0xc60c9bfcb9f7aa1d57f0969b1975bd36e87b4e1eb2606a8a1ad27654d258ab98",
      "logs": [
        {
          "transactionIndex": 12,
          "blockNumber": 10344775,
          "transactionHash": "0xc60c9bfcb9f7aa1d57f0969b1975bd36e87b4e1eb2606a8a1ad27654d258ab98",
          "address": "0x4FBf2855eB6AB648228702356Bd726a7dfcCf101",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000399db9b924bc348bfc3bd777817631eb5a79b152"
          ],
          "data": "0x",
          "logIndex": 19,
          "blockHash": "0x43bce49734837662368be410bc6a160639e7c39d0ee93f38814f2cf8b591820d"
        }
      ],
      "blockNumber": 10344775,
      "cumulativeGasUsed": "2384958",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0xBD45F1464a89E5202D38aeeAc5979701D2e7dF20",
      "0xd878E8365AA9a6e6aB82675B760A877C695865B9"
    ],
    "numDeployments": 1,
    "solcInputHash": "facc6a1fa50dc446a19239fa534f655a",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"samotTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"PaymentDone\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalCost\",\"type\":\"uint256\"}],\"name\":\"buyItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"samotToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SamotMKT.sol\":\"SamotMKT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/SamotMKT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n\\ncontract SamotMKT is Ownable, ReentrancyGuard{\\n    IERC20 public samotToken;\\n    address public admin;\\n    uint256 paymentId = 0;\\n    using SafeMath for uint256;\\n\\n    event PaymentDone(\\n        address payer,\\n        uint256 amount,\\n        uint256 paymentId,\\n        uint256 date\\n    );\\n\\n    constructor(address _adminAddress, address samotTokenAddress) {\\n        admin = _adminAddress;\\n        samotToken = IERC20(samotTokenAddress);\\n    }\\n\\n\\n    function setAdminAddress(address _adminAddress) external onlyOwner {\\n        admin = _adminAddress;\\n    }\\n\\n    function buyItems(uint256 _totalCost) external nonReentrant{\\n        require(samotToken.balanceOf(msg.sender) >= _totalCost,\\\"Not enough tokens\\\");\\n        bool success = samotToken.transferFrom(msg.sender,admin , _totalCost);\\n        require(success, \\\"Purchase failed.\\\");\\n        paymentId ++;\\n        emit PaymentDone(msg.sender, _totalCost, paymentId, block.timestamp);\\n    }\\n\\n    function withdraw() external onlyOwner nonReentrant {\\n    (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    require(success, \\\"Transfer failed.\\\");\\n  }\\n  \\n}\",\"keccak256\":\"0x49df3c86a3a35d8172fb11ba389af127b07ae7d1533859a1a336d2cbc5d22262\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405260006004553480156200001657600080fd5b50604051620011fa380380620011fa83398181016040528101906200003c919062000223565b6200005c62000050620000ed60201b60201c565b620000f560201b60201c565b6001808190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200026a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001eb82620001be565b9050919050565b620001fd81620001de565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b600080604083850312156200023d576200023c620001b9565b5b60006200024d858286016200020c565b925050602062000260858286016200020c565b9150509250929050565b610f80806200027a6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d957806398561cdb146100f7578063f2fde38b14610115578063f851a4401461013157610088565b80632c1e816d1461008d5780633ccfd60b146100a9578063631f6d07146100b3578063715018a6146100cf575b600080fd5b6100a760048036038101906100a29190610967565b61014f565b005b6100b161020f565b005b6100cd60048036038101906100c891906109ca565b61038f565b005b6100d7610643565b005b6100e16106cb565b6040516100ee9190610a06565b60405180910390f35b6100ff6106f4565b60405161010c9190610a80565b60405180910390f35b61012f600480360381019061012a9190610967565b61071a565b005b610139610812565b6040516101469190610a06565b60405180910390f35b610157610838565b73ffffffffffffffffffffffffffffffffffffffff166101756106cb565b73ffffffffffffffffffffffffffffffffffffffff16146101cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c290610af8565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610217610838565b73ffffffffffffffffffffffffffffffffffffffff166102356106cb565b73ffffffffffffffffffffffffffffffffffffffff161461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290610af8565b60405180910390fd5b600260015414156102d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c890610b64565b60405180910390fd5b600260018190555060003373ffffffffffffffffffffffffffffffffffffffff16476040516102ff90610bb5565b60006040518083038185875af1925050503d806000811461033c576040519150601f19603f3d011682016040523d82523d6000602084013e610341565b606091505b5050905080610385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037c90610c16565b60405180910390fd5b5060018081905550565b600260015414156103d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cc90610b64565b60405180910390fd5b600260018190555080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104399190610a06565b60206040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190610c4b565b10156104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190610cc4565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b815260040161054d93929190610cf3565b602060405180830381600087803b15801561056757600080fd5b505af115801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190610d62565b9050806105e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d890610ddb565b60405180910390fd5b600460008154809291906105f490610e2a565b91905055507f78eaebe37a28490ff43ed0e95bdc47de1587156ac0069b652e1d2d9f42464e983383600454426040516106309493929190610e73565b60405180910390a1506001808190555050565b61064b610838565b73ffffffffffffffffffffffffffffffffffffffff166106696106cb565b73ffffffffffffffffffffffffffffffffffffffff16146106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690610af8565b60405180910390fd5b6106c96000610840565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610722610838565b73ffffffffffffffffffffffffffffffffffffffff166107406106cb565b73ffffffffffffffffffffffffffffffffffffffff1614610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d90610af8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd90610f2a565b60405180910390fd5b61080f81610840565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061093482610909565b9050919050565b61094481610929565b811461094f57600080fd5b50565b6000813590506109618161093b565b92915050565b60006020828403121561097d5761097c610904565b5b600061098b84828501610952565b91505092915050565b6000819050919050565b6109a781610994565b81146109b257600080fd5b50565b6000813590506109c48161099e565b92915050565b6000602082840312156109e0576109df610904565b5b60006109ee848285016109b5565b91505092915050565b610a0081610929565b82525050565b6000602082019050610a1b60008301846109f7565b92915050565b6000819050919050565b6000610a46610a41610a3c84610909565b610a21565b610909565b9050919050565b6000610a5882610a2b565b9050919050565b6000610a6a82610a4d565b9050919050565b610a7a81610a5f565b82525050565b6000602082019050610a956000830184610a71565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ae2602083610a9b565b9150610aed82610aac565b602082019050919050565b60006020820190508181036000830152610b1181610ad5565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610b4e601f83610a9b565b9150610b5982610b18565b602082019050919050565b60006020820190508181036000830152610b7d81610b41565b9050919050565b600081905092915050565b50565b6000610b9f600083610b84565b9150610baa82610b8f565b600082019050919050565b6000610bc082610b92565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000610c00601083610a9b565b9150610c0b82610bca565b602082019050919050565b60006020820190508181036000830152610c2f81610bf3565b9050919050565b600081519050610c458161099e565b92915050565b600060208284031215610c6157610c60610904565b5b6000610c6f84828501610c36565b91505092915050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b6000610cae601183610a9b565b9150610cb982610c78565b602082019050919050565b60006020820190508181036000830152610cdd81610ca1565b9050919050565b610ced81610994565b82525050565b6000606082019050610d0860008301866109f7565b610d1560208301856109f7565b610d226040830184610ce4565b949350505050565b60008115159050919050565b610d3f81610d2a565b8114610d4a57600080fd5b50565b600081519050610d5c81610d36565b92915050565b600060208284031215610d7857610d77610904565b5b6000610d8684828501610d4d565b91505092915050565b7f5075726368617365206661696c65642e00000000000000000000000000000000600082015250565b6000610dc5601083610a9b565b9150610dd082610d8f565b602082019050919050565b60006020820190508181036000830152610df481610db8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e3582610994565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e6857610e67610dfb565b5b600182019050919050565b6000608082019050610e8860008301876109f7565b610e956020830186610ce4565b610ea26040830185610ce4565b610eaf6060830184610ce4565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610f14602683610a9b565b9150610f1f82610eb8565b604082019050919050565b60006020820190508181036000830152610f4381610f07565b905091905056fea2646970667358221220c1d6ed217cc38f27159d683387cfda576c20514f0be63936affde23d87ac9dec64736f6c63430008080033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d957806398561cdb146100f7578063f2fde38b14610115578063f851a4401461013157610088565b80632c1e816d1461008d5780633ccfd60b146100a9578063631f6d07146100b3578063715018a6146100cf575b600080fd5b6100a760048036038101906100a29190610967565b61014f565b005b6100b161020f565b005b6100cd60048036038101906100c891906109ca565b61038f565b005b6100d7610643565b005b6100e16106cb565b6040516100ee9190610a06565b60405180910390f35b6100ff6106f4565b60405161010c9190610a80565b60405180910390f35b61012f600480360381019061012a9190610967565b61071a565b005b610139610812565b6040516101469190610a06565b60405180910390f35b610157610838565b73ffffffffffffffffffffffffffffffffffffffff166101756106cb565b73ffffffffffffffffffffffffffffffffffffffff16146101cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c290610af8565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610217610838565b73ffffffffffffffffffffffffffffffffffffffff166102356106cb565b73ffffffffffffffffffffffffffffffffffffffff161461028b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028290610af8565b60405180910390fd5b600260015414156102d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c890610b64565b60405180910390fd5b600260018190555060003373ffffffffffffffffffffffffffffffffffffffff16476040516102ff90610bb5565b60006040518083038185875af1925050503d806000811461033c576040519150601f19603f3d011682016040523d82523d6000602084013e610341565b606091505b5050905080610385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037c90610c16565b60405180910390fd5b5060018081905550565b600260015414156103d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cc90610b64565b60405180910390fd5b600260018190555080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104399190610a06565b60206040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190610c4b565b10156104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190610cc4565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b815260040161054d93929190610cf3565b602060405180830381600087803b15801561056757600080fd5b505af115801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190610d62565b9050806105e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d890610ddb565b60405180910390fd5b600460008154809291906105f490610e2a565b91905055507f78eaebe37a28490ff43ed0e95bdc47de1587156ac0069b652e1d2d9f42464e983383600454426040516106309493929190610e73565b60405180910390a1506001808190555050565b61064b610838565b73ffffffffffffffffffffffffffffffffffffffff166106696106cb565b73ffffffffffffffffffffffffffffffffffffffff16146106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690610af8565b60405180910390fd5b6106c96000610840565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610722610838565b73ffffffffffffffffffffffffffffffffffffffff166107406106cb565b73ffffffffffffffffffffffffffffffffffffffff1614610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d90610af8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd90610f2a565b60405180910390fd5b61080f81610840565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061093482610909565b9050919050565b61094481610929565b811461094f57600080fd5b50565b6000813590506109618161093b565b92915050565b60006020828403121561097d5761097c610904565b5b600061098b84828501610952565b91505092915050565b6000819050919050565b6109a781610994565b81146109b257600080fd5b50565b6000813590506109c48161099e565b92915050565b6000602082840312156109e0576109df610904565b5b60006109ee848285016109b5565b91505092915050565b610a0081610929565b82525050565b6000602082019050610a1b60008301846109f7565b92915050565b6000819050919050565b6000610a46610a41610a3c84610909565b610a21565b610909565b9050919050565b6000610a5882610a2b565b9050919050565b6000610a6a82610a4d565b9050919050565b610a7a81610a5f565b82525050565b6000602082019050610a956000830184610a71565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ae2602083610a9b565b9150610aed82610aac565b602082019050919050565b60006020820190508181036000830152610b1181610ad5565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610b4e601f83610a9b565b9150610b5982610b18565b602082019050919050565b60006020820190508181036000830152610b7d81610b41565b9050919050565b600081905092915050565b50565b6000610b9f600083610b84565b9150610baa82610b8f565b600082019050919050565b6000610bc082610b92565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b6000610c00601083610a9b565b9150610c0b82610bca565b602082019050919050565b60006020820190508181036000830152610c2f81610bf3565b9050919050565b600081519050610c458161099e565b92915050565b600060208284031215610c6157610c60610904565b5b6000610c6f84828501610c36565b91505092915050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b6000610cae601183610a9b565b9150610cb982610c78565b602082019050919050565b60006020820190508181036000830152610cdd81610ca1565b9050919050565b610ced81610994565b82525050565b6000606082019050610d0860008301866109f7565b610d1560208301856109f7565b610d226040830184610ce4565b949350505050565b60008115159050919050565b610d3f81610d2a565b8114610d4a57600080fd5b50565b600081519050610d5c81610d36565b92915050565b600060208284031215610d7857610d77610904565b5b6000610d8684828501610d4d565b91505092915050565b7f5075726368617365206661696c65642e00000000000000000000000000000000600082015250565b6000610dc5601083610a9b565b9150610dd082610d8f565b602082019050919050565b60006020820190508181036000830152610df481610db8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e3582610994565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e6857610e67610dfb565b5b600182019050919050565b6000608082019050610e8860008301876109f7565b610e956020830186610ce4565b610ea26040830185610ce4565b610eaf6060830184610ce4565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610f14602683610a9b565b9150610f1f82610eb8565b604082019050919050565b60006020820190508181036000830152610f4381610f07565b905091905056fea2646970667358221220c1d6ed217cc38f27159d683387cfda576c20514f0be63936affde23d87ac9dec64736f6c63430008080033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 7,
          "contract": "contracts/SamotMKT.sol:SamotMKT",
          "label": "_owner",
          "offset": 0,
          "slot": "0",
          "type": "t_address"
        },
        {
          "astId": 115,
          "contract": "contracts/SamotMKT.sol:SamotMKT",
          "label": "_status",
          "offset": 0,
          "slot": "1",
          "type": "t_uint256"
        },
        {
          "astId": 569,
          "contract": "contracts/SamotMKT.sol:SamotMKT",
          "label": "samotToken",
          "offset": 0,
          "slot": "2",
          "type": "t_contract(IERC20)222"
        },
        {
          "astId": 571,
          "contract": "contracts/SamotMKT.sol:SamotMKT",
          "label": "admin",
          "offset": 0,
          "slot": "3",
          "type": "t_address"
        },
        {
          "astId": 574,
          "contract": "contracts/SamotMKT.sol:SamotMKT",
          "label": "paymentId",
          "offset": 0,
          "slot": "4",
          "type": "t_uint256"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_contract(IERC20)222": {
          "encoding": "inplace",
          "label": "contract IERC20",
          "numberOfBytes": "20"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }